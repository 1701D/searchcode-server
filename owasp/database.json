[{"type": "Information Disclosure,Confidentiality", "name": "Trace.Warn", "desc": "Trace shoud be disabled in production enviroment. And should be used only for debugging. Ensure you are not providing sensitive informations."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "System.Diagnostic.Process.Start", "desc": "This k_name may be vulnerable to command injection attacks or OS injection attacks. Java linking to the native OS can cause serious issues and potentially give rise to total server compromise."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "delete", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "exec sp_executesql", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "delete from where", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "exec sp_", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "exec xp_", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "exec @", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "executestatement", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "executeSQL", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "driver", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "<meta>", "desc": "Many of the HTML tags below can be used for client side attacks such as cross site scripting. It is important to examine the context in which these tags are used and to examine any relevant data validation associated with the display."}, {"type": "Information Disclosure,Confidentiality", "name": "request.certificate", "desc": "Requests from external sources are obviously a key area of a secure code review. We"}, {"type": "Information Disclosure,Confidentiality", "name": "request.cookie", "desc": "Requests from external sources are obviously a key area of a secure code review. We"}, {"type": "Information Disclosure,Confidentiality", "name": "request.form", "desc": "Requests from external sources are obviously a key area of a secure code review. We"}, {"type": "Information Disclosure,Confidentiality", "name": "request.querystring", "desc": "Requests from external sources are obviously a key area of a secure code review. We"}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "java.sql.Statement.executeQuery", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "java.sql.Statement.executeUpdate", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Information Disclosure,Confidentiality", "name": "javax.servlet.jsp.JspWriter.print", "desc": "Can lead to Cross site Scripting"}, {"type": "Information Disclosure,Confidentiality", "name": "javax.servlet.ServletOutputStream.print", "desc": "Can lead to Cross Site Scripting"}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "javax.servlet.http.Cookie", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "javax.servlet.", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "<body>", "desc": "Many of the HTML tags below can be used for client side attacks such as cross site scripting. It is important to examine the context in which these tags are used and to examine any relevant data validation associated with the display."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "<object>", "desc": "Many of the HTML tags below can be used for client side attacks such as cross site scripting. It is important to examine the context in which these tags are used and to examine any relevant data validation associated with the display."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "DataSource", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "New OleDbConnection", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "ADODB.recordset", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": ".Open", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": ".Provider", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "Server.CreateObject", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Authentication,Information Disclosure,Spoofing Identity,Confidentiality", "name": "ReflectionPermission.MemberAccess", "desc": "Bypassing the code access security permission? Not a good idea. This keyword is a part of a list of potentially dangerous permissions such as calling unmanaged code, outside the CLR."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "sql server", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "sqloledb", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "adodb", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "GetQueryResultInXML", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "enableViewState", "desc": "It is important that many variables in machine.config can be overridden in the web.config file for a particular application."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "setfilter", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "SqlCommand", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "Microsoft.Jet", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "SqlDataReader", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "GetString", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "SqlDataAdapter", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "CommandType", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "StoredProcedure", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "System.Data.Sql", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "<applet>", "desc": "Many of the HTML tags below can be used for client side attacks such as cross site scripting. It is important to examine the context in which these tags are used and to examine any relevant data validation associated with the display."}, {"type": "Authentication,Non-Repudiation,Spoofing Identity,Repudiation", "name": "RC2", "desc": "If cryptography is used then is a strong enough cipher used i.e. AES or 3DES. What size key is used, the larger the better. Where is hashing performed. Are password that are being persisted hashed, they should be. How are random numbers generated? is the PRNG \"random enough\"?"}, {"type": "Authentication,Non-Repudiation,Spoofing Identity,Repudiation", "name": "System.Random", "desc": "If cryptography is used then is a strong enough cipher used i.e. AES or 3DES. What size key is used, the larger the better. Where is hashing performed. Are password that are being persisted hashed, they should be. How are random numbers generated? is the PRNG \"random enough\"?"}, {"type": "Authentication,Non-Repudiation,Spoofing Identity,Repudiation", "name": "Random", "desc": "If cryptography is used then is a strong enough cipher used i.e. AES or 3DES. What size key is used, the larger the better. Where is hashing performed. Are password that are being persisted hashed, they should be. How are random numbers generated? is the PRNG \"random enough\"?"}, {"type": "Authentication,Non-Repudiation,Spoofing Identity,Repudiation", "name": "System.Security.Cryptography", "desc": "If cryptography is used then is a strong enough cipher used i.e. AES or 3DES. What size key is used, the larger the better. Where is hashing performed. Are password that are being persisted hashed, they should be. How are random numbers generated? is the PRNG \"random enough\"?"}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "<ilayer>", "desc": "Many of the HTML tags below can be used for client side attacks such as cross site scripting. It is important to examine the context in which these tags are used and to examine any relevant data validation associated with the display."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "ProtectedMemory", "desc": "If storing sensitive data in memory recommend one uses the following."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "HttpOnly", "desc": "Cookie manipulation can be key to various application security exploits such as session hijacking/fixation and parameter manipulation. One should examine any code relating to cookie functionalty as this would have a bearing on session security."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "System.NET.Cookie", "desc": "Cookie manipulation can be key to various application security exploits such as session hijacking/fixation and parameter manipulation. One should examine any code relating to cookie functionalty as this would have a bearing on session security."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "<frame security", "desc": "Many of the HTML tags below can be used for client side attacks such as cross site scripting. It is important to examine the context in which these tags are used and to examine any relevant data validation associated with the display."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "<iframe security", "desc": "Many of the HTML tags below can be used for client side attacks such as cross site scripting. It is important to examine the context in which these tags are used and to examine any relevant data validation associated with the display."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "system.web.ui.htmlcontrols.htmlinputhidden", "desc": "The input controls below are server classes used to produce and display web application form fields. Looking for such references helps locate entry points into the application."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "system.web.ui.webcontrols.textbox", "desc": "The input controls below are server classes used to produce and display web application form fields. Looking for such references helps locate entry points into the application."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "system.web.ui.webcontrols.listbox", "desc": "The input controls below are server classes used to produce and display web application form fields. Looking for such references helps locate entry points into the application."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "system.web.ui.webcontrols.checkboxlist", "desc": "The input controls below are server classes used to produce and display web application form fields. Looking for such references helps locate entry points into the application."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "system.web.ui.webcontrols.dropdownlist", "desc": "The input controls below are server classes used to produce and display web application form fields. Looking for such references helps locate entry points into the application."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "requestEncoding", "desc": "The .NET Framework relies on .config files to define configuration settings. The .config files are text-based XML files. Many .config files can, and typically do, exist on a single system. Web applications refer to a web.config file located in the application's root directory. For ASP.NET applications, web.config information about most aspects of the application's operation."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "responseEncoding", "desc": "The .NET Framework relies on .config files to define configuration settings. The .config files are text-based XML files. Many .config files can, and typically do, exist on a single system. Web applications refer to a web.config file located in the application's root directory. For ASP.NET applications, web.config information about most aspects of the application's operation."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "trace", "desc": "The .NET Framework relies on .config files to define configuration settings. The .config files are text-based XML files. Many .config files can, and typically do, exist on a single system. Web applications refer to a web.config file located in the application's root directory. For ASP.NET applications, web.config information about most aspects of the application's operation."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "authorization", "desc": "The .NET Framework relies on .config files to define configuration settings. The .config files are text-based XML files. Many .config files can, and typically do, exist on a single system. Web applications refer to a web.config file located in the application's root directory. For ASP.NET applications, web.config information about most aspects of the application's operation."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "CustomErrors", "desc": "The .NET Framework relies on .config files to define configuration settings. The .config files are text-based XML files. Many .config files can, and typically do, exist on a single system. Web applications refer to a web.config file located in the application's root directory. For ASP.NET applications, web.config information about most aspects of the application's operation."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "httpRuntime", "desc": "The .NET Framework relies on .config files to define configuration settings. The .config files are text-based XML files. Many .config files can, and typically do, exist on a single system. Web applications refer to a web.config file located in the application's root directory. For ASP.NET applications, web.config information about most aspects of the application's operation."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "maxRequestLength", "desc": "The .NET Framework relies on .config files to define configuration settings. The .config files are text-based XML files. Many .config files can, and typically do, exist on a single system. Web applications refer to a web.config file located in the application's root directory. For ASP.NET applications, web.config information about most aspects of the application's operation."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "forms protection", "desc": "The .NET Framework relies on .config files to define configuration settings. The .config files are text-based XML files. Many .config files can, and typically do, exist on a single system. Web applications refer to a web.config file located in the application's root directory. For ASP.NET applications, web.config information about most aspects of the application's operation."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "appSettings", "desc": "The .NET Framework relies on .config files to define configuration settings. The .config files are text-based XML files. Many .config files can, and typically do, exist on a single system. Web applications refer to a web.config file located in the application's root directory. For ASP.NET applications, web.config information about most aspects of the application's operation."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "Insert", "desc": "It is recommende not to use this function directly in code. If used in client side code could be fatal to database integrity"}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "ValidateRequest", "desc": "Not validating all input data to a list of potentially dangerous values could be fatal, it is recommended to use build in security features of the framework. Logging this can also be a source of information leakage. It is important to examine all calls to the logging subsystem and to determinate if any sensitive information is being logged. Common mistakes are logging userID in conjuction with passwords within the authentication functionality or logging database requests which may contains sensitive data."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "ObjectInputStream", "desc": "This command are generally used to read data into ones application. They may be potential entry points into application. The entry points may be from an external source and must be inverstigated. Can be also used in path traversal attacks or DoS attacks."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "pipedinputstream", "desc": "This command are generally used to read data into ones application. They may be potential entry points into application. The entry points may be from an external source and must be inverstigated. Can be also used in path traversal attacks or DoS attacks."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "objectstream", "desc": "This command are generally used to read data into ones application. They may be potential entry points into application. The entry points may be from an external source and must be inverstigated. Can be also used in path traversal attacks or DoS attacks."}, {"type": "Denial of Service,Avalability,Authorization,Elevation of privilege", "name": "strcpy", "desc": "Watch out legacy methods calls."}, {"type": "Denial of Service,Avalability,Authorization,Elevation of privilege", "name": "printf", "desc": "Watch out legacy methods calls."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "deny", "desc": "The .NET Framework relies on .config files to define configuration settings. The .config files are text-based XML files. Many .config files can, and typically do, exist on a single system. Web applications refer to a web.config file located in the application's root directory. For ASP.NET applications, web.config information about most aspects of the application's operation."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "credentials", "desc": "The .NET Framework relies on .config files to define configuration settings. The .config files are text-based XML files. Many .config files can, and typically do, exist on a single system. Web applications refer to a web.config file located in the application's root directory. For ASP.NET applications, web.config information about most aspects of the application's operation."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "identity impersonate", "desc": "The .NET Framework relies on .config files to define configuration settings. The .config files are text-based XML files. Many .config files can, and typically do, exist on a single system. Web applications refer to a web.config file located in the application's root directory. For ASP.NET applications, web.config information about most aspects of the application's operation."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "timeout", "desc": "The .NET Framework relies on .config files to define configuration settings. The .config files are text-based XML files. Many .config files can, and typically do, exist on a single system. Web applications refer to a web.config file located in the application's root directory. For ASP.NET applications, web.config information about most aspects of the application's operation."}, {"type": "Information Disclosure,Non Repudiation,Confidentiality,Repudiation", "name": "Application_OnAuthenticateRequest", "desc": "Each application has it's own global.asax if one is required. Global.asax sets the event code and values forn an application using scripts. One must ensure that application variables do not contains sensitive informations, as they are accessible to the whole application and to all users within it."}, {"type": "Information Disclosure,Non Repudiation,Confidentiality,Repudiation", "name": "Application_OnAuthorizeRequest", "desc": "Each application has it's own global.asax if one is required. Global.asax sets the event code and values forn an application using scripts. One must ensure that application variables do not contains sensitive informations, as they are accessible to the whole application and to all users within it."}, {"type": "Information Disclosure,Non Repudiation,Confidentiality,Repudiation", "name": "Session_OnStart", "desc": "Each application has it's own global.asax if one is required. Global.asax sets the event code and values forn an application using scripts. One must ensure that application variables do not contains sensitive informations, as they are accessible to the whole application and to all users within it."}, {"type": "Information Disclosure,Non Repudiation,Confidentiality,Repudiation", "name": "Session_OnEnd", "desc": "Each application has it's own global.asax if one is required. Global.asax sets the event code and values forn an application using scripts. One must ensure that application variables do not contains sensitive informations, as they are accessible to the whole application and to all users within it."}, {"type": "Denial of Service,Avalability,Information Disclosure,Confidentiality", "name": "log4net", "desc": "Logging can be a source of information leakage. It is important to examine all calls to the logging subsystem and to determinate if any sensitive information is being logged. Common mistakes are logging userID in conjuction with passwords within the authentication functionality or logging database requests which may contains sensitive data."}, {"type": "Denial of Service,Avalability,Information Disclosure,Confidentiality", "name": "System.Diagnostics.Debug", "desc": "Logging can be a source of information leakage. It is important to examine all calls to the logging subsystem and to determinate if any sensitive information is being logged. Common mistakes are logging userID in conjuction with passwords within the authentication functionality or logging database requests which may contains sensitive data."}, {"type": "Denial of Service,Avalability,Information Disclosure,Confidentiality", "name": "System.Diagnostics.Trace", "desc": "Logging can be a source of information leakage. It is important to examine all calls to the logging subsystem and to determinate if any sensitive information is being logged. Common mistakes are logging userID in conjuction with passwords within the authentication functionality or logging database requests which may contains sensitive data."}, {"type": "Denial of Service,Avalability,Information Disclosure,Confidentiality", "name": "Thread", "desc": "Locating code that contains multithreaded functions. Concurrency issuses can result in race conditions which may resutl in security vulnerabilities. The Treat keyword is where new threats object are created. Code that uses static global variables which hold sensitive security informations may cause session issues. Code that uses static constructors may also cause issues between threads. Not synchronizing the Dispose method may cause issues if a number of threats call Dispose at the same time, this may cause resource release issues."}, {"type": "Denial of Service,Avalability,Confidentiality,Information Disclosure", "name": "Dispose", "desc": "Locating code that contains multithreaded functions. Concurrency issuses can result in race conditions which may resutl in security vulnerabilities. The Treat keyword is where new threats object are created. Code that uses static global variables which hold sensitive security informations may cause session issues. Code that uses static constructors may also cause issues between threads. Not synchronizing the Dispose method may cause issues if a number of threats call Dispose at the same time, this may cause resource release issues."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "Public", "desc": "Public and Sealed relate to the design at class level. Classes which are not intended to be derived from should be sealed. Make sure all class fields are public for a reason. Don't expose anything you do not need to."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "Sealed", "desc": "Public and Sealed relate to the design at class level. Classes which are not intended to be derived from should be sealed. Make sure all class fields are public for a reason. Don't expose anything you do not need to."}, {"type": "Denial of Service,Avalability,Confidentiality,Information Disclosure", "name": "Serializable", "desc": "Main disadvantage of serialization from security perspective is that, it can cause resource overhead to CPU and I/O devices as well as it's a comparatively slow communication technology. In case of XML serialisation it is insecure and occupy lot of space on disk/ memory and database and it has limitation of being accessible from public declared classess only."}, {"type": "Denial of Service,Avalability,Confidentiality,Information Disclosure", "name": "AllowPartiallyTrustedCallersAttribute", "desc": "It is recommended to check your defined classess for any security vulnerability, if done so then check for permissions of each caller in the stack. If ANY of those callers do not have the required permission then this is a Security Exception need to be managed or removed. To make it more simpler by default a ASP.NET Web Application that is running in a partial trust scenario cannot call for a strongly named assembly but the only way to call an assembly with a strong name is if the strong named assembly is marked with the AllowPartiallyTrustedCallersAttribute (APTCA)"}, {"type": "Denial of Service,Avalability,Confidentiality,Information Disclosure", "name": "GetObjectData", "desc": "The GetObjectData function is used to serialize the object, and the specialized constructor is used to deserialize the object. The constructor and GetObjectData are passed the same parameters: an instance of the SerializationInfo class and an instance of the StreamingContext structure. Code that calls GetObjectData requires the SecurityPermission for providing serialization services. Associated enumeration: SecurityPermissionFlag.SerializationFormatter."}, {"type": "Denial of Service,Avalability,Confidentiality,Information Disclosure", "name": "Strongk_nameIdentityPermission", "desc": "Identity permissions help protect code from unauthorized access. The runtime grants identity permissions when the assembly is loaded based on the evidence that is provided this means Link demands using StrongNameIdentityPermissionAttribute succeed if only the immediate caller has the correct evidence."}, {"type": "Denial of Service,Avalability,Confidentiality,Information Disclosure", "name": "Strongk_nameIdentity", "desc": "CLR (common language runtime) validates the identity of the assembly provided to it by the loader or host. Thehost can be a server host (Asp.Net) or a shell host (command line). This identity, also called as the Evidence, can be a strong name (StrongNameIdentityPermission), originating Zone that is Intranet, Internet or Trusted site (ZoneIdentitypermission), publishers digitalsignature (PublisherIdentityPermission), originating URL(URLIdentityPermission) or originating website(WebSiteIdentityPermission). Here in this case one of the attributes are missing or misconfigured."}, {"type": "Denial of Service,Avalability,Confidentiality,Information Disclosure", "name": "catch{", "desc": "Code may be generated dynamically at runtime. Code that is generated dynamically as a function of external input may give rise to issues. If your code contains sensitive data does it need to be serialized?"}, {"type": "Denial of Service,Avalability,Confidentiality,Information Disclosure", "name": "Finally", "desc": "Code may be generated dynamically at runtime. Code that is generated dynamically as a function of external input may give rise to issues. If your code contains sensitive data does it need to be serialized?"}, {"type": "Denial of Service,Avalability,Confidentiality,Information Disclosure", "name": "trace enabled", "desc": "Code may be generated dynamically at runtime. Code that is generated dynamically as a function of external input may give rise to issues. If your code contains sensitive data does it need to be serialized?"}, {"type": "Denial of Service,Avalability,Confidentiality,Information Disclosure", "name": "customErrors mode", "desc": "Code may be generated dynamically at runtime. Code that is generated dynamically as a function of external input may give rise to issues. If your code contains sensitive data does it need to be serialized?"}, {"type": "Authentication,Non-Repudiation,Spoofing Identity,Repudiation", "name": "xor", "desc": "If cryptography is used then is a strong enough cipher used i.e. AES or 3DES. What size key is used, the larger the better. Where is hashing performed. Are password that are being persisted hashed, they should be. How are random numbers generated? is the PRNG \"random enough\"?"}, {"type": "Authentication,Non-Repudiation,Spoofing Identity,Repudiation", "name": "DES", "desc": "If cryptography is used then is a strong enough cipher used i.e. AES or 3DES. What size key is used, the larger the better. Where is hashing performed. Are password that are being persisted hashed, they should be. How are random numbers generated? is the PRNG \"random enough\"?"}, {"type": "Authentication,Non-Repudiation,Spoofing Identity,Repudiation", "name": "RNGCryptoServiceProvider", "desc": "If cryptography is used then is a strong enough cipher used i.e. AES or 3DES. What size key is used, the larger the better. Where is hashing performed. Are password that are being persisted hashed, they should be. How are random numbers generated? is the PRNG \"random enough\"?"}, {"type": "Authentication,Non-Repudiation,Spoofing Identity,Repudiation", "name": "SHA", "desc": "If cryptography is used then is a strong enough cipher used i.e. AES or 3DES. What size key is used, the larger the better. Where is hashing performed. Are password that are being persisted hashed, they should be. How are random numbers generated? is the PRNG \"random enough\"?"}, {"type": "Authentication,Non-Repudiation,Spoofing Identity,Repudiation", "name": "MD5", "desc": "If cryptography is used then is a strong enough cipher used i.e. AES or 3DES. What size key is used, the larger the better. Where is hashing performed. Are password that are being persisted hashed, they should be. How are random numbers generated? is the PRNG \"random enough\"?"}, {"type": "Authentication,Non-Repudiation,Spoofing Identity,Repudiation", "name": "base64", "desc": "If cryptography is used then is a strong enough cipher used i.e. AES or 3DES. What size key is used, the larger the better. Where is hashing performed. Are password that are being persisted hashed, they should be. How are random numbers generated? is the PRNG \"random enough\"?"}, {"type": "Authentication,Information Disclosure,Spoofing Identity,Confidentiality", "name": ".RequestMinimum", "desc": "Bypassing the code access security permission? Not a good idea. This keyword is a part of a list of potentially dangerous permissions such as calling unmanaged code, outside the CLR."}, {"type": "Authentication,Information Disclosure,Spoofing Identity,Confidentiality", "name": ".RequestOptional", "desc": "Bypassing the code access security permission? Not a good idea. This keyword is a part of a list of potentially dangerous permissions such as calling unmanaged code, outside the CLR."}, {"type": "Authentication,Information Disclosure,Spoofing Identity,Confidentiality", "name": "Assert", "desc": "Bypassing the code access security permission? Not a good idea. This keyword is a part of a list of potentially dangerous permissions such as calling unmanaged code, outside the CLR."}, {"type": "Authentication,Information Disclosure,Spoofing Identity,Confidentiality", "name": "Debug.Assert", "desc": "Bypassing the code access security permission? Not a good idea. This keyword is a part of a list of potentially dangerous permissions such as calling unmanaged code, outside the CLR."}, {"type": "Authentication,Information Disclosure,Spoofing Identity,Confidentiality", "name": "CodeAccessPermission", "desc": "Bypassing the code access security permission? Not a good idea. This keyword is a part of a list of potentially dangerous permissions such as calling unmanaged code, outside the CLR."}, {"type": "Authentication,Information Disclosure,Spoofing Identity,Confidentiality", "name": "SecurityPermission.ControlEvidence", "desc": "Bypassing the code access security permission? Not a good idea. This keyword is a part of a list of potentially dangerous permissions such as calling unmanaged code, outside the CLR."}, {"type": "Authentication,Information Disclosure,Spoofing Identity,Confidentiality", "name": "SecurityPermission.SerializationFormatter", "desc": "Bypassing the code access security permission? Not a good idea. This keyword is a part of a list of potentially dangerous permissions such as calling unmanaged code, outside the CLR."}, {"type": "Authentication,Information Disclosure,Spoofing Identity,Confidentiality", "name": "SecurityPermission.ControlPrincipal", "desc": "Bypassing the code access security permission? Not a good idea. This keyword is a part of a list of potentially dangerous permissions such as calling unmanaged code, outside the CLR."}, {"type": "Authentication,Information Disclosure,Spoofing Identity,Confidentiality", "name": "SecurityPermission.ControlDomainPolicy", "desc": "Bypassing the code access security permission? Not a good idea. This keyword is a part of a list of potentially dangerous permissions such as calling unmanaged code, outside the CLR."}, {"type": "Authentication,Information Disclosure,Spoofing Identity,Confidentiality", "name": "SecurityPermission.ControlPolicy", "desc": "Bypassing the code access security permission? Not a good idea. This keyword is a part of a list of potentially dangerous permissions such as calling unmanaged code, outside the CLR."}, {"type": "Information Disclosure,Non Repudiation,Confidentiality,Repudiation", "name": "Java.io", "desc": "This command are generally used to read data into ones application. They may be potential entry points into application. The entry points may be from an external source and must be inverstigated. Can be also used in path traversal attacks or DoS attacks."}, {"type": "Information Disclosure,Non Repudiation,Confidentiality,Repudiation", "name": "FileInputStream", "desc": "This command are generally used to read data into ones application. They may be potential entry points into application. The entry points may be from an external source and must be inverstigated. Can be also used in path traversal attacks or DoS attacks."}, {"type": "Information Disclosure,Non Repudiation,Confidentiality,Repudiation", "name": "FilterInputStream", "desc": "This command are generally used to read data into ones application. They may be potential entry points into application. The entry points may be from an external source and must be inverstigated. Can be also used in path traversal attacks or DoS attacks."}, {"type": "Information Disclosure,Non Repudiation,Confidentiality,Repudiation", "name": "SequenceInputStream", "desc": "This command are generally used to read data into ones application. They may be potential entry points into application. The entry points may be from an external source and must be inverstigated. Can be also used in path traversal attacks or DoS attacks."}, {"type": "Information Disclosure,Non Repudiation,Confidentiality,Repudiation", "name": "StringBufferInputStream", "desc": "This command are generally used to read data into ones application. They may be potential entry points into application. The entry points may be from an external source and must be inverstigated. Can be also used in path traversal attacks or DoS attacks."}, {"type": "Information Disclosure,Non Repudiation,Confidentiality,Repudiation", "name": "BufferedReader", "desc": "This command are generally used to read data into ones application. They may be potential entry points into application. The entry points may be from an external source and must be inverstigated. Can be also used in path traversal attacks or DoS attacks."}, {"type": "Information Disclosure,Non Repudiation,Confidentiality,Repudiation", "name": "ByteArrayInputStream", "desc": "This command are generally used to read data into ones application. They may be potential entry points into application. The entry points may be from an external source and must be inverstigated. Can be also used in path traversal attacks or DoS attacks."}, {"type": "Information Disclosure,Non Repudiation,Confidentiality,Repudiation", "name": "CharArrayReader", "desc": "This command are generally used to read data into ones application. They may be potential entry points into application. The entry points may be from an external source and must be inverstigated. Can be also used in path traversal attacks or DoS attacks."}, {"type": "Information Disclosure,Non Repudiation,Confidentiality,Repudiation", "name": "StreamTokenizer", "desc": "This command are generally used to read data into ones application. They may be potential entry points into application. The entry points may be from an external source and must be inverstigated. Can be also used in path traversal attacks or DoS attacks."}, {"type": "Information Disclosure,Non Repudiation,Confidentiality,Repudiation", "name": "getResourceAsStream", "desc": "This command are generally used to read data into ones application. They may be potential entry points into application. The entry points may be from an external source and must be inverstigated. Can be also used in path traversal attacks or DoS attacks."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "ConfigurationSettings", "desc": "The .NET Framework relies on .config files to define configuration settings. The .config files are text-based XML files. Many .config files can, and typically do, exist on a single system. Web applications refer to a web.config file located in the application's root directory. For ASP.NET applications, web.config information about most aspects of the application's operation."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "authentication mode", "desc": "The .NET Framework relies on .config files to define configuration settings. The .config files are text-based XML files. Many .config files can, and typically do, exist on a single system. Web applications refer to a web.config file located in the application's root directory. For ASP.NET applications, web.config information about most aspects of the application's operation."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "allow", "desc": "The .NET Framework relies on .config files to define configuration settings. The .config files are text-based XML files. Many .config files can, and typically do, exist on a single system. Web applications refer to a web.config file located in the application's root directory. For ASP.NET applications, web.config information about most aspects of the application's operation."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "getParameterValues", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "getParameter", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "getParameterMap", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "getScheme", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "getProtocol", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "getContentType", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "getServerk_name", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "getRemoteAddr", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "getRemoteHost", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "getRealPath", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "getLocalk_name", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "getAttribute", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "getAttributek_names", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "getLocalAddr", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Denial of Service,Avalability,Information Disclosure,Confidentiality", "name": "getAuthType", "desc": "getAuthType() returns the name of the authentication scheme used to protect the servlet. This Method getAuthType() called on request object may not return correct authorization scheme."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "getRemoteUser", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "getCookies", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "isSecure", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "HttpServletRequest", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "getQueryString", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "getHeader", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "getPrincipal", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "isUserInRole", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "### Castor", "desc": "If we can identify major architectural components within that application (right away) it can help narKeyPointer our search, and we can then look for known vulnerabilities in those components and frameworks."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "org.exolab.castor", "desc": "If we can identify major architectural components within that application (right away) it can help narKeyPointer our search, and we can then look for known vulnerabilities in those components and frameworks."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "### JAXB", "desc": "If we can identify major architectural components within that application (right away) it can help narKeyPointer our search, and we can then look for known vulnerabilities in those components and frameworks."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "javax.xml", "desc": "If we can identify major architectural components within that application (right away) it can help narKeyPointer our search, and we can then look for known vulnerabilities in those components and frameworks."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "### JMS", "desc": "If we can identify major architectural components within that application (right away) it can help narKeyPointer our search, and we can then look for known vulnerabilities in those components and frameworks."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "JMS", "desc": "If we can identify major architectural components within that application (right away) it can help narKeyPointer our search, and we can then look for known vulnerabilities in those components and frameworks."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "Hack", "desc": "Developers say the darnedest thing in their source code. Look for the following keywords as pointers to possible software vulnerabilities.. ahhh those developers!"}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "getRequestedSessionId", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "getValue", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "getComment", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "getDomain", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "getPath", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "getk_name", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "update", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "setHeader", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "addHeader", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "getWriter", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "getOutputStream", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "executequery", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "ExecuteReader", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "java.io.PrintWriter.print", "desc": "This command are generally used to read data into ones application. They may be potential entry points into application. The entry points may be from an external source and must be inverstigated. Can be also used in path traversal attacks or DoS attacks."}, {"type": "Information Disclosure,Non Repudiation,Confidentiality,Repudiation", "name": "jdbc", "desc": "JDBC is not associated with a trusted SQL Server connection and / or credentials are stored in clear text"}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "select", "desc": "Using SELECT * makes your code vulnerable to changes in underlying table(s) and as such should be avoided"}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "insert", "desc": "Exploiting INSERT statements an attacker is not given any feedback over http or web page while a SELECT statement an attacker might receive back errors from the SQL server. This could be a case of a blind SQL injection attempt so use carefully"}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "execute", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Information Disclosure,Confidentiality", "name": "java.sql.ResultSet.getString", "desc": "In JDBC 1.0, java.sql.ResultSet.getString() function provide the ResultSet interface a limited functionality"}, {"type": "Information Disclosure,Confidentiality", "name": "java.sql.ResultSet.getObject", "desc": "In JDBC 1.0, java.sql.ResultSet.getString() function provide the ResultSet interface a limited functionality"}, {"type": "Information Disclosure,Confidentiality", "name": "innerHtml", "desc": "Here we are looking for responses to the client. Responses which go unvalidated or which echo external input without data validation are key areas to examine. Many client side attacks results from poor response validation. XSS relies on this somewhat."}, {"type": "Information Disclosure,Confidentiality", "name": "innertext", "desc": "Here we are looking for responses to the client. Responses which go unvalidated or which echo external input without data validation are key areas to examine. Many client side attacks results from poor response validation. XSS relies on this somewhat."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "java.sql.Statement.execute", "desc": "Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determinate if the application is vulnerable to SQL Injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient). These are type and treats parameter as the literal value and not the executable code in the database."}, {"type": "Denial of Service,Avalability,Information Disclosure,Confidentiality", "name": "java.sql.Statement.addBatch", "desc": "It is recommende not to use this function because there could be a database access error would fail the operation and/ or the driver may not support the batch updates"}, {"type": "Denial of Service,Avalability,Confidentiality,Information Disclosure", "name": "java.sql.Connection.prepareStatement", "desc": "Although Prepared Statements helps in defending against SQL Injection, there are possibilities of SQL Injection attacks through inappropriate usage of Prepared Statements. Foe example a scenario where the input variables are passed directly into the Prepared Statement and thereby paving way for SQL Injection attacks."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "java.io.FileReader", "desc": "This command are generally used to read data into ones application. They may be potential entry points into application. The entry points may be from an external source and must be inverstigated. Can be also used in path traversal attacks or DoS attacks."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "java.io.FileWriter", "desc": "This command are generally used to read data into ones application. They may be potential entry points into application. The entry points may be from an external source and must be inverstigated. Can be also used in path traversal attacks or DoS attacks."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "java.io.RandomAccessFile", "desc": "This command are generally used to read data into ones application. They may be potential entry points into application. The entry points may be from an external source and must be inverstigated. Can be also used in path traversal attacks or DoS attacks."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "java.io.File", "desc": "This command are generally used to read data into ones application. They may be potential entry points into application. The entry points may be from an external source and must be inverstigated. Can be also used in path traversal attacks or DoS attacks."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "java.io.FileOutputStream", "desc": "This command are generally used to read data into ones application. They may be potential entry points into application. The entry points may be from an external source and must be inverstigated. Can be also used in path traversal attacks or DoS attacks."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "getParameterk_names", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Information Disclosure,Confidentiality", "name": "invalidate", "desc": "Always be scared of the session management. Look at each session object within the application and ensure the level of security meets the requirements."}, {"type": "Information Disclosure,Confidentiality", "name": "getId", "desc": "Always be scared of the session management. Look at each session object within the application and ensure the level of security meets the requirements."}, {"type": "Information Disclosure,Confidentiality", "name": "java.lang.Runtime.exec", "desc": "This k_name may be vulnerable to command injection attacks or OS injection attacks. Java linking to the native OS can cause serious issues and potentially give rise to total server compromise."}, {"type": "Information Disclosure,Confidentiality", "name": "java.io.PrintStream.write", "desc": "We may come across some information leakage by examing code below contained in ones application."}, {"type": "Information Disclosure,Confidentiality", "name": "log4j", "desc": "We may come across some information leakage by examing code below contained in ones application."}, {"type": "Information Disclosure,Confidentiality", "name": "jLo", "desc": "We may come across some information leakage by examing code below contained in ones application."}, {"type": "Information Disclosure,Confidentiality", "name": "Lumberjack", "desc": "We may come across some information leakage by examing code below contained in ones application."}, {"type": "Information Disclosure,Confidentiality", "name": "MonoLog", "desc": "We may come across some information leakage by examing code below contained in ones application."}, {"type": "Information Disclosure,Confidentiality", "name": "qflog", "desc": "We may come across some information leakage by examing code below contained in ones application."}, {"type": "Information Disclosure,Confidentiality", "name": "just4log", "desc": "We may come across some information leakage by examing code below contained in ones application."}, {"type": "Information Disclosure,Confidentiality", "name": "log4Ant", "desc": "We may come across some information leakage by examing code below contained in ones application."}, {"type": "Information Disclosure,Confidentiality", "name": "JDLabAgent", "desc": "We may come across some information leakage by examing code below contained in ones application."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "### Ajax", "desc": "If we can identify major architectural components within that application (right away) it can help narKeyPointer our search, and we can then look for known vulnerabilities in those components and frameworks."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "XMLHTTP", "desc": "If we can identify major architectural components within that application (right away) it can help narKeyPointer our search, and we can then look for known vulnerabilities in those components and frameworks."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "### Struts", "desc": "If we can identify major architectural components within that application (right away) it can help narKeyPointer our search, and we can then look for known vulnerabilities in those components and frameworks."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "org.apache.struts", "desc": "If we can identify major architectural components within that application (right away) it can help narKeyPointer our search, and we can then look for known vulnerabilities in those components and frameworks."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "### Spring", "desc": "If we can identify major architectural components within that application (right away) it can help narKeyPointer our search, and we can then look for known vulnerabilities in those components and frameworks."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "org.springframework", "desc": "If we can identify major architectural components within that application (right away) it can help narKeyPointer our search, and we can then look for known vulnerabilities in those components and frameworks."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "### Java Server Faces (JSF)", "desc": "If we can identify major architectural components within that application (right away) it can help narKeyPointer our search, and we can then look for known vulnerabilities in those components and frameworks."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "import javax.faces", "desc": "If we can identify major architectural components within that application (right away) it can help narKeyPointer our search, and we can then look for known vulnerabilities in those components and frameworks."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "### Hibernate", "desc": "If we can identify major architectural components within that application (right away) it can help narKeyPointer our search, and we can then look for known vulnerabilities in those components and frameworks."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "import org.hibernate", "desc": "Operations performed via a stateless session bypass Hibernate's event model and interceptors. Stateless sessions are vulnerable to data aliasing effects, due to the lack of a first-level cache"}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "<frameset>", "desc": "Many of the HTML tags below can be used for client side attacks such as cross site scripting. It is important to examine the context in which these tags are used and to examine any relevant data validation associated with the display."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "<embed>", "desc": "Many of the HTML tags below can be used for client side attacks such as cross site scripting. It is important to examine the context in which these tags are used and to examine any relevant data validation associated with the display."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "<frame>", "desc": "Many of the HTML tags below can be used for client side attacks such as cross site scripting. It is important to examine the context in which these tags are used and to examine any relevant data validation associated with the display."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "<html>", "desc": "Many of the HTML tags below can be used for client side attacks such as cross site scripting. It is important to examine the context in which these tags are used and to examine any relevant data validation associated with the display."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "<iframe>", "desc": "Many of the HTML tags below can be used for client side attacks such as cross site scripting. It is important to examine the context in which these tags are used and to examine any relevant data validation associated with the display."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "<img>", "desc": "Many of the HTML tags below can be used for client side attacks such as cross site scripting. It is important to examine the context in which these tags are used and to examine any relevant data validation associated with the display."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "<style>", "desc": "Many of the HTML tags below can be used for client side attacks such as cross site scripting. It is important to examine the context in which these tags are used and to examine any relevant data validation associated with the display."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "<layer>", "desc": "Many of the HTML tags below can be used for client side attacks such as cross site scripting. It is important to examine the context in which these tags are used and to examine any relevant data validation associated with the display."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "Kludge", "desc": "Developers say the darnedest thing in their source code. Look for the following keywords as pointers to possible software vulnerabilities.. ahhh those developers!"}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "Bypass", "desc": "Developers say the darnedest thing in their source code. Look for the following keywords as pointers to possible software vulnerabilities.. ahhh those developers!"}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "Steal", "desc": "Developers say the darnedest thing in their source code. Look for the following keywords as pointers to possible software vulnerabilities.. ahhh those developers!"}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "Stolen", "desc": "Developers say the darnedest thing in their source code. Look for the following keywords as pointers to possible software vulnerabilities.. ahhh those developers!"}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "Divert", "desc": "Developers say the darnedest thing in their source code. Look for the following keywords as pointers to possible software vulnerabilities.. ahhh those developers!"}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "Broke", "desc": "Developers say the darnedest thing in their source code. Look for the following keywords as pointers to possible software vulnerabilities.. ahhh those developers!"}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "Trick", "desc": "Developers say the darnedest thing in their source code. Look for the following keywords as pointers to possible software vulnerabilities.. ahhh those developers!"}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "Fix", "desc": "Developers say the darnedest thing in their source code. Look for the following keywords as pointers to possible software vulnerabilities.. ahhh those developers!"}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "ToDo", "desc": "Developers say the darnedest thing in their source code. Look for the following keywords as pointers to possible software vulnerabilities.. ahhh those developers!"}, {"type": "Information Disclosure,Confidentiality", "name": "document.write", "desc": "Look for Ajax usage, and possible Javascript issues."}, {"type": "Information Disclosure,Confidentiality", "name": "document.cookie", "desc": "Cookie manipulation can be key to various application security exploits such as session hijacking/fixation and parameter manipulation. One should examine any code relating to cookie functionalty as this would have a bearing on session security."}, {"type": "Information Disclosure,Confidentiality", "name": "window.location", "desc": "Look for Ajax usage, and possible Javascript issues."}, {"type": "Information Disclosure,Confidentiality", "name": "document.URL", "desc": "Look for Ajax usage, and possible Javascript issues."}, {"type": "Information Disclosure,Confidentiality", "name": "window.createRequest", "desc": "If this function is used with Java Ajax in client side such then such usage should be avoided"}, {"type": "Information Disclosure,Confidentiality", "name": "getSession", "desc": "Always be scared of the session management. Look at each session object within the application and ensure the level of security meets the requirements."}, {"type": "Integrity,Non Repudiation,Repudiation,Tampering with Data", "name": "KeyManagerFactory", "desc": "Looking for code which utilises SSL as a medium for point to point encryption. This fragment should indicate where SSL functionality has been developed."}, {"type": "Integrity,Non Repudiation,Repudiation,Tampering with Data", "name": "HttpsURLConnection", "desc": "Looking for code which utilises SSL as a medium for point to point encryption. This fragment should indicate where SSL functionality has been developed."}, {"type": "Integrity,Non Repudiation,Repudiation,Tampering with Data", "name": "TrustManagerFactory", "desc": "Looking for code which utilises SSL as a medium for point to point encryption. This fragment should indicate where SSL functionality has been developed."}, {"type": "Integrity,Non Repudiation,Repudiation,Tampering with Data", "name": "SSLSocketFactory", "desc": "Looking for code which utilises SSL as a medium for point to point encryption. This fragment should indicate where SSL functionality has been developed."}, {"type": "Integrity,Non Repudiation,Repudiation,Tampering with Data", "name": "SSLContext", "desc": "Looking for code which utilises SSL as a medium for point to point encryption. This fragment should indicate where SSL functionality has been developed."}, {"type": "Integrity,Non Repudiation,Repudiation,Tampering with Data", "name": "com.sun.net.ssl", "desc": "Looking for code which utilises SSL as a medium for point to point encryption. This fragment should indicate where SSL functionality has been developed."}, {"type": "Information Disclosure,Confidentiality", "name": "java.sql.Connection.prepareCall", "desc": "Searching for Java Database related code this list should help you pinpoint classes/methods which are involved in the persistence layer of the application being reviewed"}, {"type": "Information Disclosure,Confidentiality", "name": "response.write", "desc": "Here we are looking for responses to the client. Responses which go unvalidated or which echo external input without data validation are key areas to examine. Many client side attacks results from poor response validation. XSS relies on this somewhat."}, {"type": "Denial of Service,Avalability,Information Disclosure,Confidentiality", "name": "request.TotalBytes", "desc": "Requests from external sources are obviously a key area of a secure code review."}, {"type": "Denial of Service,Avalability,Information Disclosure,Confidentiality", "name": "request.IsSecureConnection", "desc": "Requests from external sources are obviously a key area of a secure code review. We"}, {"type": "Denial of Service,Avalability,Information Disclosure,Confidentiality", "name": "request.servervariables", "desc": "Requests from external sources are obviously a key area of a secure code review. We"}, {"type": "Information Disclosure,Confidentiality", "name": "<%=", "desc": "Here we are looking for responses to the client. Responses which go unvalidated or which echo external input without data validation are key areas to examine. Many client side attacks results from poor response validation. XSS relies on this somewhat."}, {"type": "Information Disclosure,Confidentiality", "name": "HttpUtility", "desc": "Here we are looking for responses to the client. Responses which go unvalidated or which echo external input without data validation are key areas to examine. Many client side attacks results from poor response validation. XSS relies on this somewhat."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "enableViewStateMac", "desc": "It is important that many variables in machine.config can be overridden in the web.config file for a particular application."}, {"type": "Denial of Service,Avalability,Integrity,Tampering with Data", "name": "SecureString", "desc": "If storing sensitive data in memory recommend one uses the following."}, {"type": "Denial of Service,Avalability,Information Disclosure,Confidentiality", "name": "Console.WriteLine", "desc": "Logging can be a source of information leakage. It is important to examine all calls to the logging subsystem and to determinate if any sensitive information is being logged. Common mistakes are logging userID in conjuction with passwords within the authentication functionality or logging database requests which may contains sensitive data."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "System.Reflection", "desc": "If Code that is generated dynamically (runtime) as a function of external input may give rise to the security issues. This means if your code contains sensitive data does it need to be serialized?"}, {"type": "Authentication,Information Disclosure,Spoofing Identity,Confidentiality", "name": "SecurityPermission.SkipVerification", "desc": "Bypassing the code access security permission? Not a good idea. This keyword is a part of a list of potentially dangerous permissions such as calling unmanaged code, outside the CLR."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "addCookie", "desc": "This API call may be avenues for parameter, header, URL & Cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as may of such API's obtain the parameters directly from HTTP requests."}, {"type": "Information Disclosure,Integrity,Confidentiality,Tampering with Data", "name": "debug", "desc": "The .NET Framework relies on .config files to define configuration settings. The .config files are text-based XML files. Many .config files can, and typically do, exist on a single system. Web applications refer to a web.config file located in the application's root directory. For ASP.NET applications, web.config information about most aspects of the application's operation."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "UrlEncode", "desc": "Many of the HTML tags below can be used for client side attacks such as cross site scripting. It is important to examine the context in which these tags are used and to examine any relevant data validation associated with the display."}, {"type": "Authentication,Information Disclosure,Spoofing Identity,Confidentiality", "name": "SecurityPermission.UnmanagedCode", "desc": "Bypassing the code access security permission? Not a good idea. This keyword is a part of a list of potentially dangerous permissions such as calling unmanaged code, outside the CLR."}, {"type": "Information Disclosure,Confidentiality,Authorization,Elevation of privilege", "name": "HtmlEncode", "desc": "Many of the HTML tags below can be used for client side attacks such as cross site scripting. It is important to examine the context in which these tags are used and to examine any relevant data validation associated with the display."}, {"type": "Information Disclosure,Confidentiality", "name": "void Write", "desc": "Different programming languages use different terms to identify the fundamental managed types. Class library designers must avoid using language-specific terminology. Follow the rules described in this section to avoid type name confusion. Use names that describe a type's meaning rather than names that describe the type. In the rare case that a parameter has no semantic meaning beyond its type, use a generic name."}, {"type": "Information Disclosure,Confidentiality", "name": "Sub Write", "desc": "Different programming languages use different terms to identify the fundamental managed types. Class library designers must avoid using language-specific terminology. Follow the rules described in this section to avoid type name confusion. Use names that describe a type's meaning rather than names that describe the type. In the rare case that a parameter has no semantic meaning beyond its type, use a generic name."}]
